##############################################################################
#                                                                            #
#  This file is part of SonSilentSea, a free ships based combatr game.       #
#  Copyright (C) 2014  Jose Luis Cercos Pita <jlcercos@gmail.com>            #
#                                                                            #
#  AQUAgpusph is free software: you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by      #
#  the Free Software Foundation, either version 3 of the License, or         #
#  (at your option) any later version.                                       #
#                                                                            #
#  AQUAgpusph is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#  GNU General Public License for more details.                              #
#                                                                            #
#  You should have received a copy of the GNU General Public License         #
#  along with AQUAgpusph.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                            #
##############################################################################

import bpy
from bpy import types, props

bl_info = {
    "name": "SonSilentGalaxy SDK",
    "author": "Jose Luis Cercos-Pita",
    "version": (1, 0),
    "blender": (2, 7, 0),
    "location": "Properties > Physics",
    "description": "Tools to generate objects for SonSilentGalaxy",
    "category": "Game Engine"}


class ssgSDK(bpy.types.Panel):
    bl_label = "ssgSDK"
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "physics"
    COMPAT_ENGINES = {'BLENDER_GAME'}

    @classmethod
    def poll(cls, context):
        ob = context.active_object
        rd = context.scene.render
        return ob and ob.game and (rd.engine in cls.COMPAT_ENGINES)

    def draw(self, context):
        self.layout.column()
        self.layout.row()
        self.layout.split()


def register():
    bpy.utils.register_class(ssgSDK)


def unregister():
    bpy.utils.unregister_class(ssgSDK)


if __name__ == "__main__":
    register()

